/*
Fichier contenant toutes les mixins SASS
*/
@use "sass:map";
@use "sass:meta";
@use "variables" as var;

/// Mixin pour ajouter automatiquement les préfixes vendeurs à une propriété CSS.
///
/// @access public
/// @param {String} $property - Propriété CSS à laquelle ajouter les préfixes vendeurs.
/// @param {Any} $value - Valeur de la propriété CSS.
///
/// @example scss - Utilisation
///   .foo {
///     @include add-vendor-prefixes(transition, all 0.5s ease);
///   }
///
/// @example css - CSS après compilation
///   .foo {
///     -webkit-transition: all 0.5s ease;
///     -moz-transition: all 0.5s ease;
///     -ms-transition: all 0.5s ease;
///     transition: all 0.5s ease;
///   }
///
@mixin add-vendor-prefixes($property, $value) {
  @each $prefix in ("-webkit-", "-moz-", "-ms-", "-o-", "") {
    #{$prefix + $property}: $value;
  }
}

/// Mixin pour centrer un élément horizontalement et verticalement.
///
/// @access public
///
/// @example scss - Utilisation
///   .foo {
///     @include center-element;
///   }
///
/// @example css - CSS après compilation
///   .foo {
///     position: absolute;
///     top: 50%;
///     left: 50%;
///     transform: translate(-50%, -50%);
///   }
///
@mixin center-element {
  position: absolute;
  top: 50%;
  left: 50%;
  @include transform(translate(-50%, -50%));
}

/// Mixin pour ajouter un dégradé de couleur en arrière-plan avec préfixes vendeurs.
///
/// @access public
/// @param {Color} $start-color - Couleur de départ du dégradé.
/// @param {Color} $end-color - Couleur de fin du dégradé.
///
/// @example scss - Utilisation
///   .foo {
///     @include gradient-background(#ff0000, #00ff00);
///   }
///
/// @example css - CSS après compilation
///   .foo {
///     background: #ff0000;
///     background: -moz-linear-gradient(top, #ff0000 0%, #00ff00 100%);
///     background: -webkit-linear-gradient(top, #ff0000 0%, #00ff00 100%);
///     background: linear-gradient(to bottom, #ff0000 0%, #00ff00 100%);
///   }
///
@mixin gradient-background($start-color, $end-color) {
  background: $start-color;
  background: -moz-linear-gradient(top, $start-color 0%, $end-color 100%);
  background: -webkit-linear-gradient(top, $start-color 0%, $end-color 100%);
  background: linear-gradient(to bottom, $start-color 0%, $end-color 100%);
}

/// Mixin pour ajouter une ombre à un élément.
///
/// @access public
/// @param $x-offset - Décalage horizontal de l'ombre.
///
/// @example scss - Utilisation
///   .foo {
///     @include box-shadow();
///   }
///
/// @example css - CSS après compilation
///   .foo {
///     -webkit-box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);
///     -moz-box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);
///     box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);
///   }
///
@mixin box-shadow($shadow: none) {
  @include add-vendor-prefixes(box-shadow, $shadow);
}

/// Mixin pour ajouter des transitions CSS.
///
/// @access public
/// @param {List} $properties - Propriétés CSS à animer.
/// @param {Number} $duration - Durée de la transition (par défaut: 0.3s).
/// @param {String} $timing-function - Fonction de temporisation de la transition (par défaut: ease).
///
/// @example scss - Utilisation
///   .foo {
///     @include transition(all, 0.5s, ease-in-out);
///   }
///
/// @example css - CSS après compilation
///   .foo {
///     -webkit-transition: all 0.5s ease-in-out;
///     -moz-transition: all 0.5s ease-in-out;
///     transition: all 0.5s ease-in-out;
///   }
///
@mixin transition($properties, $duration: 0.3s, $timing-function: ease) {
  @include add-vendor-prefixes(transition,
    $properties $duration $timing-function );
}

/// Mixin pour ajouter des bordures arrondies à un élément.
///
/// @access public
/// @param {Length} $radius - Rayon des bordures arrondies.
///
/// @example scss - Utilisation
///   .foo {
///     @include border-radius(10px);
///   }
///
/// @example css - CSS après compilation
///   .foo {
///     -webkit-border-radius: 10px;
///     -moz-border-radius: 10px;
///     border-radius: 10px;
///   }
///
@mixin border-radius($radius) {
  @include add-vendor-prefixes(border-radius, $radius);
}

/// Mixin pour ajouter une bordure autour d'un élément.
///
/// @access public
/// @param {Length} $width - Largeur de la bordure.
/// @param {String} $style - Style de la bordure (par exemple: solid, dashed, etc.).
/// @param {Color} $color - Couleur de la bordure.
///
/// @example scss - Utilisation
///   .foo {
///     @include border(1px, solid, #000);
///   }
///
/// @example css - CSS après compilation
///   .foo {
///     border: 1px solid #000;
///     -webkit-border: 1px solid #000;
///     -moz-border: 1px solid #000;
///   }
///
@mixin border($width: none, $style: null, $color: null) {
  @include add-vendor-prefixes(border, $width $style $color);
}

/// Mixin pour ajouter une outline autour d'un élément.
///
/// @access public
/// @param {Length} $width - Largeur de la bordure.
/// @param {String} $style - Style de la bordure (par exemple: solid, dashed, etc.).
/// @param {Color} $color - Couleur de la bordure.
///
/// @example scss - Utilisation
///   .foo {
///     @include outline(1px, solid, #000);
///   }
///
/// @example css - CSS après compilation
///   .foo {
///     outline: 1px solid #000;
///     -webkit-outline: 1px solid #000;
///     -moz-outline: 1px solid #000;
///   }
///
@mixin outline($width: none, $style: null, $color: null) {
  @include add-vendor-prefixes(outline, $width $style $color);
}

/// Mixin pour appliquer des transformations CSS à un élément avec préfixes vendeurs.
///
/// @access public
/// @param {List} $transformations - Liste des transformations au format `fonction(valeur)`.
///
/// @example scss - Utilisation
///   .foo {
///     @include transform((
///       translateX(50px),
///       rotate(45deg),
///       scale(1.5)
///     ));
///   }
///
/// @example css - CSS après compilation
///   .foo {
///     -webkit-transform: translateX(50px) rotate(45deg) scale(1.5);
///     -ms-transform: translateX(50px) rotate(45deg) scale(1.5);
///     transform: translateX(50px) rotate(45deg) scale(1.5);
///   }
///
@mixin transform($transformations) {
  @include add-vendor-prefixes(transform, $transformations);
}

/// Mixin pour appliquer une taille à un élément.
///
/// @access public
/// @param {Length} $width - La taille en largeur.
/// @param {Length} $height - La taille en hauteur.
///
/// @example scss - Utilisation
///   .foo {
///     @include size(50px);
///   }
///
/// @example css - CSS après compilation
///   .foo {
///     width: 50px;
///     height: 50px;
///   }
///
@mixin size($width: null, $height: null) {
  width: $width;

  @if ($height ==null) {
    height: $width;
  }

  @else {
    height: $height;
  }
}

/// Mixin pour répondre à un point de rupture (breakpoint) spécifique.
///
/// @access public
/// @param {String} $breakpoint - Nom du point de rupture (breakpoint) défini dans la variable `$breakpoints`.
///
/// @throws Error si aucun point de rupture correspondant n'est trouvé dans la variable `$breakpoints`.
///
/// @example scss - Utilisation
///   .foo {
///     @include respond-to('sm') {
///       font-size: 14px;
///     }
///   }
///
/// @example css - CSS après compilation
///   @media (min-width: 640px) {
///     .foo {
///       font-size: 14px;
///     }
///   }
@mixin respond-to($breakpoint) {
  $raw-query: map.get(var.$breakpoints, $breakpoint);

  @if $raw-query {
    $query: if(meta.type-of($raw-query)=="string",
        unquote($raw-query),
        meta.inspect($raw-query));

    @media #{$query} {
      @content;
    }
  }

  @else {
    @error 'No value found for `#{$breakpoint}`. ' + // Correction ici
    'Please make sure it is defined in `$breakpoints` map.';
  }
}

/// Mixin pour exporter toutes les variables SASS en variables CSS
///
/// @access private
@mixin export-vars() {
  & { --color-sheme: #{var.$color-sheme}; }

  & { --primary-color: #{var.$primary-color}; }
  & { --primary-color-rgb: #{var.$primary-color-rgb}; }
  & { --primary-color-transparent-50: #{var.$primary-color-transparent-50}; }
  & { --primary-color-transparent-200: #{var.$primary-color-transparent-200}; }
  & { --primary-color-transparent-500: #{var.$primary-color-transparent-500}; }
  & { --primary-color-transparent-800: #{var.$primary-color-transparent-800}; }

  & { --background-color: #{var.$background-color}; }
  & { --background-color-lighter: #{var.$background-color-lighter}; }
  & { --background-color-darker: #{var.$background-color-darker}; }
  & { --container-color: #{var.$container-color}; }
  & { --input-color: #{var.$input-color}; }

  & { --font-familly: #{var.$font-familly}; }
  & { --font-color: #{var.$font-color}; }
  & { --font-secondary-color: #{var.$font-secondary-color}; }
  & { --font-disabled-color: #{var.$font-disabled-color}; }
  & { --font-color-invert: #{var.$font-color-invert}; }
  & { --placeholder-color: #{var.$placeholder-color}; }

  & { --danger-color: #{var.$danger-color}; }
  & { --danger-color-transparent-100: #{var.$danger-color-transparent-100}; }
  & { --danger-color-transparent-200: #{var.$danger-color-transparent-200}; }
  & { --success-color: #{var.$success-color}; }
  & { --warn-color: #{var.$warn-color}; }
  & { --warn-color-transparent-10: #{var.$warn-color-transparent-10}; }
  & { --warn-color-transparent-30: #{var.$warn-color-transparent-30}; }
  & { --info-color: #{var.$info-color}; }
  & { --neutral-color: #{var.$neutral-color}; }
  & { --border-color: #{var.$neutral-color}; }
  & { --disabled-color: #{var.$disabled-color}; }
  & { --light-grey: #{var.$light-grey}; }

  & { --padding: #{var.$padding}; }
  & { --margin: #{var.$margin}; }
  & { --gap: #{var.$gap}; }

  & { --radius: #{var.$radius}; }
  & { --inner-radius: #{var.$inner-radius}; }
  & { --xcrm-border-radius: 8px; }

  & { --inputs-size: #{var.$inputs-size}; }
  & { --icons-size: #{var.$icons-size}; }

  & { --transition-duration: #{var.$transition-duration}; }
  & { --animation-duration: #{var.$animation-duration}; }

  & { --box-shadow: #{var.$box-shadow}; }

  // primeng variables
  & { --p-button-primary-background: var(--primary-color); }
  & { --p-button-primary-border-color: var(--primary-color); }
  & { --p-inputtext-focus-border-color: var(--primary-color); }
  & { --p-button-primary-hover-background: var(--primary-color); }
  & { --p-button-primary-hover-border-color: var(--primary-color); }
  & { --p-button-primary-active-background: var(--neutral-color); }
  & { --p-button-primary-active-border-color: var(--neutral-color); }
  & { --p-dialog-color: var(--font-color); }
  & { --p-button-outlined-secondary-color: var(--font-color); }
  & { --p-dialog-background: var(--background-color); }
  & { --p-button-secondary-active-background: color-mix(in srgb, var(--light-grey) 85%, black); }
  & { --p-button-secondary-active-border-color: color-mix(in srgb, var(--light-grey) 80%, black); }
  & { --p-button-secondary-active-color: var(--font-color); }

  //card
  & { --p-card-background: var(--container-color); }



  // accordéon primeng
  & { --p-accordion-panel-border-color: var(--neutral-color); }
  & { --p-accordion-header-active-background: var(--background-color); }
  & { --p-accordion-header-active-color: var(--font-color); }
  & { --p-accordion-content-border-color: var(--neutral-color); }
  & { --p-accordion-content-background: var(--background-color); }
  & { --p-accordion-content-color: var(--font-color); }
  & { --p-accordion-content-padding: var(--padding); }
  & { --p-accordion-header-color: var(--font-color); }
  & { --p-accordion-header-border-color: var(--neutral-color); }
  & { --p-accordion-header-background: var(--background-color); }
  & { --p-accordion-header-hover-color: var(--font-color); }
  & { --p-accordion-header-hover-background: var(--background-color); }
  & { --p-accordion-header-active-hover-background: var(--background-color); }
  & { --p-accordion-header-padding: 2px; }

  // p-float label
  & { --p-floatlabel-focus-color: var(--font-color); }
  & { --p-floatlabel-color: var(--neutral-color); }
  & { --p-floatlabel-active-font-size: 1rem; }
  // input text
  & { --p-inputtext-color: var(--font-color); }
  & { --p-inputtext-border-color: var(--neutral-color); }

  // confirm dialog
  & { --p-confirmdialog-icon-color: var(--font-color); }
  & { --p-confirmdialog-message-color: var(--font-color); }

  // TreeTable
  & { --p-treetable-header-cell-border-color: var(--neutral-color); }
  & { --p-treetable-row-selected-color: var(--font-color-invert); }
  & { --p-treetable-body-cell-border-color: var(--neutral-color); }
  & { --p-treetable-row-selected-color: var(--font-color); }
  & { --p-treetable-row-selected-background: var(--background-color-lighter); }
  & { --p-treetable-header-cell-selected-background: var(--background-color-lighter); }
  & { --p-treetable-header-cell-selected-color: var(--font-color); }
  & { --p-treetable-header-cell-color: var(--font-color); }
  & { --p-treetable-sort-icon-color: var(--primary-color); }
  & { --p-treetable-sort-icon-hover-color: var(--primary-color); }

  // tabs
  & { --p-tabs-tab-background: var(--background-color); }
  & { --p-tabs-tab-hover-background: var(--background-color); }
  & { --p-tabs-tab-active-background: var(--background-color); }

  & { --p-tabs-tab-gap: calc(var(--padding) / 2); }
  & { --p-tabs-tab-border-color: var(--background-color); }
  // & { --p-tabs-tab-active-border-color: var(--primary-color); }
  & { --p-tabs-tab-active-color: var(--primary-color); }
  // & { --p-tabs-tab-color: var(--font-color); }
  & { --p-tabs-tab-focus-ring-color: var(--primary-color); }
  & { --p-tabs-tablist-background: var(--background-color); }

  & { --p-tabs-tabpanel-background: var(--background-color); }
  & { --p-tabs-tabpanel-border-color: var(--background-color); }
  & { --p-tabs-tabpanel-color: var(--font-color); }
  & { --p-tabs-tabpanel-focus-ring-color: var(--primary-color); }
  & { --p-tabs-active-bar-background: var(--primary-color); }
  & { --p-tabs-tab-active-border-color: var(--background-color); }
  & { --p-tabs-tab-hover-border-color: var(--background-color); }
  & { --p-tabs-tab-padding: calc(var(--padding) / 2); }

  // textarea
  & { --p-textarea-focus-border-color: var(--primary-color); }

  & { --p-button-text-primary-color: var(--primary-color); }


  //tab
  & { --p-datatable-body-cell-selected-border-color: var(--neutral-color); }
  & { --p-datatable-row-selected-color: var(--primary-color); }
  & { --p-datatable-row-selected-background: var(--primary-color-transparent-50); }
  & { --p-datatable-row-focus-ring-color: var(--primary-color); }
  & { --p-tabs-tablist-border-color: var(--background-color); }

  //button
  & { --p-button-primary-focus-ring-color: var(--primary-color); }
  & { --p-button-text-primary-hover-background: var(--primary-color-transparent-50); }
  & { --p-button-text-primary-active-background: var(--primary-color-transparent-50); }

  & { --p-button-success-background: var(--success-color); }
  & { --p-button-success-border-color: var(--success-color); }
  & { --p-button-primary-color: var(--font-color-invert); }
  & { --p-button-primary-hover-color: var(--font-color-invert); }

  & { --p-button-secondary-background: transparent; }
  & { --p-button-secondary-border-color: var(--light-grey); }
  & { --p-button-secondary-hover-border-color: var(--light-grey); }
  & { --p-button-secondary-color: var(--font-color); }
  & { --p-button-secondary-hover-color: var(--font-color); }
  & { --p-button-secondary-hover-background: var(--light-grey); }
  //select
  & { --p-select-focus-border-color: var(--primary-color); }
  & { --p-select-option-selected-focus-background: var(--primary-color-transparent-50); }
  & { --p-select-option-selected-background: var(--primary-color-transparent-50); }
  & { --p-select-option-selected-color: var(--primary-color); }
  & { --p-select-option-hover-background: var(--primary-color-transparent-50); }
  & { --p-select-option-selected-focus-color: var(--primary-color); }
  & { --p-select-option-focus-background: var(--neutral-color); }
  & { --p-select-color: var(--font-color); }
  & { --p-select-option-color: var(--font-color); }
  & { --p-select-hover-border-color: var(--primary-color); }

  //checkbox
  & { --p-checkbox-checked-background: var(--primary-color); }
  & { --p-checkbox-checked-border-color: var(--primary-color); }
  & { --p-checkbox-checked-hover-background: var(--neutral-color); }
  & { --p-checkbox-checked-hover-border-color: var(--neutral-color); }

  & { --p-surface-900: var(--background-color); }
  & { --p-surface-950: var(--background-color-lighter); }
  & { --p-transition-duration: 0.1s; }

  //fieldset
  & { --p-fieldset-background: var(--background-color); }
  & { --p-fieldset-border-color: var(--neutral-color); }
  & { --p-fieldset-color: var(--font-color); }
  & { --p-fieldset-padding: 10px; }
  & { --p-fieldset-legend-padding: 5px; }
  & { --p-fieldset-legend-background: var(--background-color-lighter); }

  //multi-select
  & { --p-multiselect-border-color: var(--neutral-color); }
  & { --p-multiselect-focus-border-color: var(--primary-color); }
  & { --p-multiselect-option-color: var(--font-color); }
  & { --p-multiselect-option-focus-background: var(--background-color-lighter); }
  & { --p-multiselect-option-focus-color: var(--font-color); }

  & { --p-textarea-color: var(--font-color); }

  & { --p-surface-950: var(--background-color-lighter); }
  & { --p-button-text-secondary-hover-background: var(--background-color-lighter); }
  & { --p-button-text-secondary-active-background: var(--background-color); }

  // drawer
  & { --p-drawer-color: var(--font-color); }
  & { --p-drawer-border-color: var(--neutral-color); }

  //breadcrumb
  & { --p-breadcrumb-item-color: var(--font-color); }
  & { --p-breadcrumb-item-hover-color: var(--font-color); }

  //toats
  & { --p-toast-success-detail-color: var(--font-color); }
  & { --p-toast-warn-detail-color: var(--font-color); }
  & { --p-toast-info-detail-color: var(--font-color); }
  & { --p-toast-error-detail-color: var(--font-color); }

  // datepicker 
  & { --p-datepicker-select-year-color: var(--font-color); }
  & { --p-datepicker-select-month-color: var(--font-color); }
  & { --p-datepicker-panel-color: var(--font-color); }
  & { --p-datepicker-panel-color: var(--font-color); }
  & { --p-datepicker-week-day-color: var(--font-color); }
  & { --p-datepicker-time-picker-border-color: var(--font-color); }
  & { --p-datepicker-date-selected-background: var(--primary-color); }

  //card 
  & { --p-togglebutton-checked-background: var(--primary-color-transparent-50); }
  & { --p-togglebutton-background: var(--background-color-lighter); }
  & { --p-togglebutton-hover-background: var(--primary-color-transparent-50); }
  & { --p-togglebutton-padding: calc(var(--padding) / 2); }

  // Paginator
  & { --p-paginator-color: var(--font-color); }
  & { --p-paginator-nav-button-color: var(--font-color); }
  & { --p-paginator-nav-button-hover-background: var(--primary-color-transparent-50); }
  & { --p-paginator-nav-button-hover-color: var(--font-color); }
  & { --p-paginator-border-color: var(--neutral-color); }

  // steps
  & { --p-steps-item-number-active-color: var(--primary-color); }
  & { --p-steps-item-label-active-color: var(--primary-color); }

  // Legacy XCRM variables for backward compatibility
  & { --xcrm: var(--primary-color); }
  & { --xcrm-light: var(--primary-color-transparent-50); }
  & { --xcrm-opacity: var(--primary-color-transparent-50); }
  & { --xcrm-background: var(--background-color); }
  & { --xcrm-white: var(--font-color-invert); }
  & { --xcrm-black: var(--font-color); }
  & { --xcrm-red: var(--danger-color); }
  & { --xcrm-red-opacity: color-mix(in srgb, var(--danger-color) 20%, transparent); }
  & { --xcrm-red-shadow: color-mix(in srgb, var(--danger-color) 45%, transparent); }
  & { --xcrm-green: var(--success-color); }
  & { --xcrm-green-opacity: color-mix(in srgb, var(--success-color) 20%, transparent); }
  & { --xcrm-green-shadow: color-mix(in srgb, var(--success-color) 45%, transparent); }
  & { --xcrm-blue: var(--info-color); }
  & { --xcrm-blue-opacity: color-mix(in srgb, var(--info-color) 20%, transparent); }
  & { --xcrm-blue-shadow: color-mix(in srgb, var(--info-color) 45%, transparent); }
  & { --xcrm-gray: var(--neutral-color); }
  & { --xcrm-gray-shadow: var(--light-grey); }
  & { --xcrm-lightgray: var(--light-grey); }
  & { --xcrm-drawer: var(--container-color); }
  & { --xcrm-modal-backdrop: color-mix(in srgb, var(--font-color) 40%, transparent); }
  & { --xcrm-tag-active: var(--background-color-lighter); }
  & { --datachart: var(--primary-color); }
  & { --datachart-even: color-mix(in srgb, var(--primary-color) 65%, white); }
  & { --datachart-odd: color-mix(in srgb, var(--primary-color) 80%, white); }

  // Layout variables (keep only used ones)
  & { --xcrm-page-banner-height: 20px; }
  & { --xcrm-logo-container: 140px; }
  & { --xcrm-header-height: 38px; }
  & { --xcrm-full-header: calc(var(--xcrm-header-height) + var(--xcrm-page-banner-height)); }
  & { --xcrm-thumbnail-height: 140px; }
  & { --xcrm-attachment-thumbnail-height: calc(2 * var(--xcrm-thumbnail-height)); }
}
